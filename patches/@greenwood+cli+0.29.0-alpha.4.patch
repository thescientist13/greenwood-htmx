diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index df59ef6..36ae428 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -10,10 +10,17 @@ function greenwoodJsonLoader() {
   return {
     name: 'greenwood-json-loader',
     async load(id) {
-      const extension = id.split('.').pop();
+      console.log({ id });
+      // const extension = id.split('.').pop();
+      const extension = id.split('.').pop().replace('?commonjs-proxy', '');
+      console.log({ extension });
 
       if (extension === 'json') {
-        const url = new URL(`file://${id}`);
+        console.log('GO!  ---> ', id.replace('?commonjs-proxy', ''));
+        // https://github.com/rollup/rollup/issues/2121
+        const url = new URL(`file://${id.replace('?commonjs-proxy', '').replace('\x00', '')}`);
+        // const url = new URL(`file://${id}`);
+        console.log({ url });
         const json = JSON.parse(await fs.readFile(url, 'utf-8'));
         const contents = `export default ${JSON.stringify(json)}`;
 
@@ -50,7 +57,8 @@ function greenwoodResourceLoader (compilation) {
       const extension = pathname.split('.').pop();
 
       if (extension !== '' && extension !== 'js') {
-        const url = new URL(`file://${pathname}?type=${extension}`);
+        console.log({ extension, pathname })
+        const url = new URL(`file://${pathname.replace('\x00', '')}?type=${extension}`);
         const request = new Request(url.href);
         let response = new Response('');
 
@@ -155,6 +163,7 @@ function greenwoodPatchSsrPagesEntryPointRuntimeImport() {
 }
 
 const getRollupConfigForScriptResources = async (compilation) => {
+  console.log('##### getRollupConfigForScriptResources');
   const { outputDir } = compilation.context;
   const input = [...compilation.resources.values()]
     .filter(resource => resource.type === 'script')
@@ -212,10 +221,20 @@ const getRollupConfigForScriptResources = async (compilation) => {
 };
 
 const getRollupConfigForApis = async (compilation) => {
+  console.log('##### getRollupConfigForApis');
   const { outputDir, userWorkspace } = compilation.context;
   const input = [...compilation.manifest.apis.values()]
     .map(api => normalizePathnameForWindows(new URL(`.${api.path}`, userWorkspace)));
-
+  const customRollupPlugins = compilation.config.plugins.filter(plugin => {
+      return plugin.type === 'rollup';
+    }).map(plugin => {
+      return plugin.provider(compilation);
+    }).flat();
+
+  // TODO why is this needed?
+  await fs.mkdir(new URL('./api/assets/', outputDir), {
+    recursive: true
+  });
   // TODO should routes and APIs have chunks?
   // https://github.com/ProjectEvergreen/greenwood/issues/1118
   return [{
@@ -225,17 +244,29 @@ const getRollupConfigForApis = async (compilation) => {
       entryFileNames: '[name].js',
       chunkFileNames: '[name].[hash].js'
     },
+    // TODO should these plugins match across all configurations?
+    // TODO sync with SSR config
     plugins: [
       greenwoodJsonLoader(),
+      greenwoodResourceLoader(compilation),
       nodeResolve(),
       commonjs(),
-      importMetaAssets()
+      importMetaAssets(),
+      // TODO ??? ...customRollupPlugins,
     ]
   }];
 };
 
 const getRollupConfigForSsr = async (compilation, input) => {
+  console.log('##### getRollupConfigForSsr');
   const { outputDir } = compilation.context;
+  const customRollupPlugins = compilation.config.plugins.filter(plugin => {
+    return plugin.type === 'rollup';
+  }).map(plugin => {
+    return plugin.provider(compilation);
+  }).flat();
+
+  console.log({ customRollupPlugins });
 
   // TODO should routes and APIs have chunks?
   // https://github.com/ProjectEvergreen/greenwood/issues/1118
@@ -248,6 +279,7 @@ const getRollupConfigForSsr = async (compilation, input) => {
     },
     plugins: [
       greenwoodJsonLoader(),
+      greenwoodResourceLoader(compilation),
       // TODO let this through for lit to enable nodeResolve({ preferBuiltins: true })
       // https://github.com/lit/lit/issues/449
       // https://github.com/ProjectEvergreen/greenwood/issues/1118
diff --git a/node_modules/@greenwood/cli/src/loader.js b/node_modules/@greenwood/cli/src/loader.js
index 7955b24..57f3464 100644
--- a/node_modules/@greenwood/cli/src/loader.js
+++ b/node_modules/@greenwood/cli/src/loader.js
@@ -46,7 +46,12 @@ async function getCustomLoaderResponse(url, body = '', checkOnly = false) {
 // https://nodejs.org/docs/latest-v18.x/api/esm.html#resolvespecifier-context-nextresolve
 export async function resolve(specifier, context, defaultResolve) {
   const { parentURL } = context;
-  const { shouldHandle } = await getCustomLoaderResponse(new URL(specifier), null, true);
+  // console.log({ specifier, context, parentURL })
+  const x = specifier.startsWith('file://')
+    ? new URL(specifier)
+    : new URL(specifier, parentURL);
+  // console.log({ x });
+  const { shouldHandle } = await getCustomLoaderResponse(x, null, true);
 
   if (shouldHandle) {
     return {
@@ -60,10 +65,13 @@ export async function resolve(specifier, context, defaultResolve) {
 
 // https://nodejs.org/docs/latest-v18.x/api/esm.html#loadurl-context-nextload
 export async function load(source, context, defaultLoad) {
+  // console.log('LOAD', { source, context });
+  // if (source.startsWith('file://')) {
   const extension = source.split('.').pop();
-  const url = new URL('', `${source}?type=${extension}`);
+  const url = new URL(`${source}?type=${extension}`);
   const { shouldHandle } = await getCustomLoaderResponse(url, null, true);
 
+  // console.log('should handle?????', shouldHandle);
   if (shouldHandle) {
     const contents = await fs.readFile(new URL(source), 'utf-8');
     const { response } = await getCustomLoaderResponse(url, contents);
@@ -77,6 +85,7 @@ export async function load(source, context, defaultLoad) {
       shortCircuit: true
     };
   }
+  // }
 
   return defaultLoad(source, context, defaultLoad);
 }
\ No newline at end of file
